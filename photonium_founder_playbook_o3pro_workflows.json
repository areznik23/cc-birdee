{
  "timestamp": "2025-07-21T22:27:01.076076",
  "model": "o3-pro",
  "workflows": {
    "0": {
      "workflow": "Automated Beam-Expander Designer",
      "pattern": "Adam keeps asking for a single \u2018agent\u2019 that, from a short natural-language spec, auto-decides what to web-search, pulls vendor lens data, runs the Gaussian-beam math for a two-lens telescope, and then emits a ready-to-order bill-of-materials in JSON. He wants the whole research\u2192design\u2192validate\u2192export loop wrapped in one Claude Code prompt so he can drop it into his MVP without extra coding.",
      "template": "You are Claude Code. Build a ONE-FILE tool named beam_expander_tool.py that automates the entire beam-expander design workflow.\n\n==== 1. Inputs ====\nA single JSON file (or stdin) called design_request.json containing:\n{\n  \"\u03bb_nm\": 780,              # design wavelength in nm\n  \"M\": 5,                   # desired magnification (output/input waist)\n  \"w_in_mm\": 0.5,           # input 1/e^2 waist (mm)\n  \"max_L_mm\": 150,          # max overall length constraint\n  \"preferred_vendors\": [\"Thorlabs\", \"Edmund Optics\"],\n  \"coating\": \"AR-UV\",\n  \"notes\": \"diffraction-limited, cage-system compatible\"\n}\n\n==== 2. Program Requirements ====\n1. Parse the JSON spec.\n2. Generate 3\u20135 web-search queries that will likely return matching catalog lenses (e.g. \"Thorlabs 25 mm focal length UV fused silica lens AR coated\").\n3. Use Python\u2019s requests + BeautifulSoup (or DuckDuckGo HTML results) to pull the first 20 URLs, then scrape tables for: vendor, part number, focal length, diameter, thickness, substrate, price.\n4. Build a SQLite in-memory DB of candidate lenses.\n5. Enumerate all two-lens Galilean and Keplerian pairs whose focal-length ratio \u2248 M \u00b1 5% and that fit the length constraint (f1 + f2 or |f1| + |f2| + spacing \u2264 max_L_mm).\n6. For each pair, compute:\n   \u2022 Exact magnification M_calc\n   \u2022 Required spacing L (gaussian propagation)\n   \u2022 Output waist w_out\n   \u2022 RMS spot size at \u03bb\n7. Rank designs by |M_calc \u2013 M|, price, and smallest RMS spot.\n8. Return the top 3 designs as JSON:\n{\n  \"designs\": [\n    {\n      \"type\": \"Galilean\",\n      \"M_calc\": 4.98,\n      \"L_mm\": 112,\n      \"components\": [\n        {\"vendor\":\"Thorlabs\",\"part\":\"AC254-050-UV\",\"f_mm\":50,\"price\":95},\n        {\"vendor\":\"Thorlabs\",\"part\":\"AC254-250-UV\",\"f_mm\":250,\"price\":112}\n      ],\n      \"total_price\":207,\n      \"cad_urls\":[\"https://...step\",\"https://...step\"],\n      \"alignment_notes\":\"Place convex lens first \u2026\"\n    },\n    \u2026\n  ]\n}\n9. Write that JSON to beam_expander_output.json and pretty-print to stdout.\n10. Provide a function export_to_unity() that converts the design to a .fbx with correct lens spacing (use simplescene or placeholder boxes) so Adam can drop it into Unity.\n\n==== 3. End-to-End Test ====\nIf run as __main__, load tests/example_request.json, run the pipeline, assert that at least one design is returned and that magnification error <5 %.\n\n==== 4. Usage ====\n> python beam_expander_tool.py design_request.json\n\n==== 5. Deliverable ====\nReturn ONLY the full Python file contents between triple backticks so Adam can copy-paste it. Include:\n\u2022 imports\n\u2022 helper funcs (search_web, scrape_page, build_db)\n\u2022 gaussian_beam functions\n\u2022 design_picker()\n\u2022 export_to_unity()\n\u2022 main guard + test\n\nBEGIN CODE",
      "time_saved": "4-6 hours \u2192 20 minutes",
      "customer_impact": "Slashes the time needed to research and prototype custom beam expanders, letting Photonium deliver aligned optics for quantum and biotech rigs in a single afternoon instead of days."
    },
    "1": {
      "workflow": "Automated Fiber-Coupler Designer",
      "pattern": "Adam repeatedly wants to go from high-level coupling specs (wavelength, beam waist, target fiber) to a complete, validated lens + mount solution. The sequence always follows: search vendor catalogs \u2192 run Gaussian-beam calculations for optimal mode-matching \u2192 sanity-check performance with tolerance sweeps \u2192 emit a structured JSON BOM and placement diagram, ready for CAD import.",
      "template": "### PHOTONIUM FIBER-COUPLER DESIGNER (single-prompt, end-to-end)\n# Fill everything between <user-input> tags, then send the whole prompt to Claude Code.\n\n<user-input>\nTARGET_WAVELENGTH_NM = 780            # e.g. 780, 850, 1064\nINPUT_BEAM_WAIST_MM = 0.75            # 1/e^2 radius of incident Gaussian\nFIBER_MODEL = \"SM780\"                 # any standard catalog part number\nCOUPLING_EFFICIENCY_GOAL = 0.90        # fraction of power into fiber\nMECHANICAL_CONSTRAINTS = \"30 cm max optical length, 25 mm cage system preferred\"\nOPERATING_ENVIRONMENT = \"lab\"          # lab / field / vacuum / cleanroom\nSPECIAL_NOTES = \"minimize chromatic shift; budget <$800\"\n</user-input>\n\n---\nINSTRUCTIONS TO CLAUDE CODE (execute internally, return ONE final JSON block):\n1. Research \u2192 Query Thorlabs & Edmund Optics APIs for lenses, fiber collimators, and compatible mounts that match TARGET_WAVELENGTH_NM and budget. Rank by coating, focal length, diameter, cost.\n2. Design \u2192\n   a. Treat INPUT_BEAM_WAIST_MM as w0 at z=0.\n   b. Compute ideal lens focal length(s) and spacing that mode-match to the chosen FIBER_MODEL\u2019s mode-field diameter & NA.\n   c. If a single lens cannot reach COUPLING_EFFICIENCY_GOAL, explore two-lens telescope solutions.\n3. Validate \u2192 Perform Gaussian-beam propagation and overlap-integral calculation to estimate coupling efficiency. Run \u00b15% focal-length and \u00b1100 \u00b5m positioning tolerance sweep; report worst-case efficiency.\n4. Generate \u2192 Output a JSON object with:\n   {\n     \"bill_of_materials\": [ {\"part_number\", \"vendor\", \"description\", \"price_usd\"}, \u2026 ],\n     \"optical_layout\": [ {\"component\", \"z_mm\", \"x_mm\", \"y_mm\", \"orientation\"}, \u2026 ],\n     \"expected_efficiency\": {\"nominal\", \"worst_case\"},\n     \"assembly_instructions\": \"step-by-step text\",\n     \"cad_export\": \"solidworks_pack_and_go.zip (base64) OR null if not requested\"\n   }\n5. End-to-End Test \u2192 Insert an internal unit test that re-computes overlap integral using the returned layout; assert |\u03b7_test \u2212 \u03b7_nominal| < 1e-3. If it fails, iterate component choice automatically once.\n6. Finish \u2192 Return ONLY the final JSON. No explanations. Ensure it is valid JSON.\n\n# After sending, wait for Claude Code to reply with the complete JSON design package.",
      "time_saved": "5-7 hours \u2192 20 minutes",
      "customer_impact": "Quantum and biotech teams receive a ready-to-assemble, tolerance-checked fiber coupling module in minutes, accelerating prototype iterations and freeing Adam to focus on higher-value features."
    }
  }
}